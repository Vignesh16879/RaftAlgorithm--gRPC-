# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import raft_pb2 as raft_pb2


class RaftServiceStub(object):
        """Missing associated documentation comment in .proto file."""

        def __init__(self, channel):
                """Constructor.

                Args:
                channel: A grpc.Channel.
                """
                self.AppendEntry = channel.unary_unary(
                        '/RaftService.RaftService/AppendEntry',
                        request_serializer=raft_pb2.HandleAppendEntryRequest.SerializeToString,
                        response_deserializer=raft_pb2.HandleAppendEntryResponse.FromString,
                        )
                self.RequestVote = channel.unary_unary(
                        '/RaftService.RaftService/RequestVote',
                        request_serializer=raft_pb2.HandleRequestVoteRequest.SerializeToString,
                        response_deserializer=raft_pb2.HandleRequestVoteResponse.FromString,
                        )
                self.ServeClient = channel.unary_unary(
                        '/RaftService.RaftService/ServeClient',
                        request_serializer=raft_pb2.HandleServeClientArgs.SerializeToString,
                        response_deserializer=raft_pb2.HandleServeClientResponse.FromString,
                        )


class RaftServiceServicer(object):
        """Missing associated documentation comment in .proto file."""

        def AppendEntry(self, request, context):
                """Missing associated documentation comment in .proto file."""
                context.set_code(grpc.StatusCode.UNIMPLEMENTED)
                context.set_details('Method not implemented!')
                raise NotImplementedError('Method not implemented!')

        def RequestVote(self, request, context):
                """Missing associated documentation comment in .proto file."""
                context.set_code(grpc.StatusCode.UNIMPLEMENTED)
                context.set_details('Method not implemented!')
                raise NotImplementedError('Method not implemented!')

        def ServeClient(self, request, context):
                """Missing associated documentation comment in .proto file."""
                context.set_code(grpc.StatusCode.UNIMPLEMENTED)
                context.set_details('Method not implemented!')
                raise NotImplementedError('Method not implemented!')


def add_RaftServiceServicer_to_server(servicer, server):
        rpc_method_handlers = {
                'AppendEntry': grpc.unary_unary_rpc_method_handler(
                        servicer.AppendEntry,
                        request_deserializer=raft_pb2.HandleAppendEntryRequest.FromString,
                        response_serializer=raft_pb2.HandleAppendEntryResponse.SerializeToString,
                ),
                'RequestVote': grpc.unary_unary_rpc_method_handler(
                        servicer.RequestVote,
                        request_deserializer=raft_pb2.HandleRequestVoteRequest.FromString,
                        response_serializer=raft_pb2.HandleRequestVoteResponse.SerializeToString,
                ),
                'ServeClient': grpc.unary_unary_rpc_method_handler(
                        servicer.ServeClient,
                        request_deserializer=raft_pb2.HandleServeClientArgs.FromString,
                        response_serializer=raft_pb2.HandleServeClientResponse.SerializeToString,
                ),
        }
        generic_handler = grpc.method_handlers_generic_handler(
                'RaftService.RaftService', rpc_method_handlers)
        server.add_generic_rpc_handlers((generic_handler,))


# This class is part of an EXPERIMENTAL API.
class RaftService(object):
        """Missing associated documentation comment in .proto file."""

        @staticmethod
        def AppendEntry(request,
                target,
                options=(),
                channel_credentials=None,
                call_credentials=None,
                insecure=False,
                compression=None,
                wait_for_ready=None,
                timeout=None,
                metadata=None):
                return grpc.experimental.unary_unary(request, target, '/RaftService.RaftService/AppendEntry',
                raft_pb2.HandleAppendEntryRequest.SerializeToString,
                raft_pb2.HandleAppendEntryResponse.FromString,
                options, channel_credentials,
                insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

        @staticmethod
        def RequestVote(request,
                target,
                options=(),
                channel_credentials=None,
                call_credentials=None,
                insecure=False,
                compression=None,
                wait_for_ready=None,
                timeout=None,
                metadata=None):
                return grpc.experimental.unary_unary(request, target, '/RaftService.RaftService/RequestVote',
                raft_pb2.HandleRequestVoteRequest.SerializeToString,
                raft_pb2.HandleRequestVoteResponse.FromString,
                options, channel_credentials,
                insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

        @staticmethod
        def ServeClient(request,
                target,
                options=(),
                channel_credentials=None,
                call_credentials=None,
                insecure=False,
                compression=None,
                wait_for_ready=None,
                timeout=None,
                metadata=None):
                return grpc.experimental.unary_unary(request, target, '/RaftService.RaftService/ServeClient',
                raft_pb2.HandleServeClientArgs.SerializeToString,
                raft_pb2.HandleServeClientResponse.FromString,
                options, channel_credentials,
                insecure, call_credentials, compression, wait_for_ready, timeout, metadata)